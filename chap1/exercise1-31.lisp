
(define (identify x) x)
(define (inc x) (+ x 1))
(define (product_recursive term a next b)
	(if (> a b)
		1
		(* (term a)
		   (product term (next a) next b))
	)
)
(define (product_iterative term a next b)
	(define (iter a result)
		(if (> a b)
			result
			(iter (next a) (* result (term a)))
		)
	)
	(iter a 1)
)

(define (pi-partal n)
	(define (numerator n)
		(if (even? n)
			(+ n 2)
			(+ n 1)
		)
	)
	(define (denominator n)
		(if (even? n)
			(+ n 1)
			(+ n 2)
		)
	)
	(/ (numerator n) (denominator n))
)

(display (product_recursive pi-partal 1 inc 3))
(display (product_iterative identify 1 inc 4))
